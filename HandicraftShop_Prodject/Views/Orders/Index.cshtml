@model IEnumerable<BussinessObject.Order>

<section id="orders" class="orders section light-background">
    <div class="container" data-aos="fade-up">

        <!-- Title -->
        <div class="section-title text-center mb-4">
            <h2>My Orders</h2>
            <p>View and track your recent purchases</p>
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs justify-content-center mb-4" id="orderTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-status="pending" type="button" role="tab">
                    <i class="bi bi-hourglass-split me-1"></i> Pending Orders
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-status="history" type="button" role="tab">
                    <i class="bi bi-clock-history me-1"></i> Order History
                </button>
            </li>
        </ul>

        <!-- 🔍 Filter/Search Form -->
        <form id="searchForm" class="order-filter bg-white p-3 rounded-3 shadow-sm mb-4">
            <div class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label class="form-label fw-semibold text-secondary">Order ID</label>
                    <input type="text" name="orderId" class="form-control" placeholder="Enter order ID..." />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold text-secondary">From Date</label>
                    <input type="date" name="fromDate" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold text-secondary">To Date</label>
                    <input type="date" name="toDate" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold text-secondary">Payment Status</label>
                    <select name="paymentStatus" class="form-select">
                        <option value="">All</option>
                        <option value="Pending">Pending</option>
                        <option value="Paid">Paid</option>
                        <option value="Refunded">Refunded</option>
                    </select>
                </div>
            </div>
            <div class="text-end mt-3">
                <button type="submit" class="btn btn-primary px-4">
                    <i class="bi bi-search me-1"></i> Search
                </button>
                <button type="button" id="resetBtn" class="btn btn-outline-secondary px-3 ms-2">
                    <i class="bi bi-arrow-repeat"></i>
                </button>
            </div>
        </form>

        <!-- 🔄 Orders Result -->
        <div id="ordersList">
            @await Html.PartialAsync("_OrderListPartial", Model)
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const form = document.getElementById("searchForm");
            const ordersList = document.getElementById("ordersList");
            const resetBtn = document.getElementById("resetBtn");
            const tabs = document.querySelectorAll("#orderTabs button");

            let currentTab = "pending"; // default

            // Xử lý khi đổi tab
            tabs.forEach(tab => {
                tab.addEventListener("click", () => {
                    tabs.forEach(t => t.classList.remove("active"));
                    tab.classList.add("active");
                    currentTab = tab.dataset.status;

                    loadOrders();
                });
            });

            // Form search AJAX
            form.addEventListener("submit", function (e) {
                e.preventDefault();
                loadOrders();
            });

            // Nút reset
            resetBtn.addEventListener("click", () => {
                form.reset();
                loadOrders();
            });

            // Hàm tải lại danh sách order
            function loadOrders() {
                const params = new URLSearchParams(new FormData(form));
                params.append("status", currentTab); // tab hiện tại: pending/history

                fetch(`/Orders/Search?${params.toString()}`, {
                    method: "GET",
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                })
                    .then(response => response.text())
                    .then(html => {
                        ordersList.innerHTML = html;
                    })
                    .catch(err => console.error("Search failed:", err));
            }
        });
    </script>
}

<style>
    .orders.section {
        padding: 60px 0;
    }

    .nav-tabs .nav-link {
        border: none;
        font-weight: 600;
        color: #555;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
    }

        .nav-tabs .nav-link.active {
            color: #0d6efd;
            border-bottom: 2px solid #0d6efd;
        }

    .order-filter {
        border: 1px solid #eee;
    }

    .order-card {
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

    .btn-outline-primary {
        border-radius: 30px;
        padding: 6px 14px;
    }
</style>
